" Tweaked from: 'A Good Vimrc' from: http://dougblack.io/words/a-good-vimrc.html - Douglas Black

" Previous set options to investgate
set nocompatible
set showmatch
"filetype <something> on?
" set ffs=unix,dos,mac " support all three, in this order

" Colors {{{
syntax enable           " enable syntax processing
if has('gui_running')
    set background=light
else
    set background=dark
endif
colorscheme solarized
"colorscheme badwolf - https://github.com/sjl/badwolf/
" }}}
" Misc {{{
set ttyfast                     " faster redraw
set backspace=indent,eol,start
" }}}
" Spaces & Tabs {{{
set tabstop=4           " 4 visual sapces per TAB
set expandtab           " use spaces for tabs
set softtabstop=4       " 4 spaces in tab when editing
set shiftwidth=4
set modelines=1
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<
" 7.4.710 - http://stackoverflow.com/questions/1675688/make-vim-show-all-white-spaces-as-a-character
" set listchars=eol:¬,tab:>␣,trail:~,extends:>,precedes:<,space=·
nnoremap <leader>p :call ToggleShowWhitspace()<CR> " Call funtion below to toggle showing whitespace
filetype indent on
filetype plugin on
set autoindent
" }}}
" UI Layout {{{
set number              " show line number
set relativenumber      " show line numbers from current
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu
"set lazyredraw
set showmatch           " higlight matching parenthesis
" }}}
" Searching {{{
"set ignorecase          " ignore case when searching
set incsearch           " search as characters are entered
set hlsearch            " highlight all matches
nnoremap <leader><space> :nohlsearch<CR> " Stop highlighing searches
" }}}
" Folding {{{
"=== folding ===
set foldenable          " don't fold files by default on open
set foldmethod=indent   " fold based on indent level
set foldnestmax=10      " max 10 depth
nnoremap <space> za
set foldlevelstart=10    " start with fold level of 1
" }}}
" Line Shortcuts {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk
nnoremap gV `[v`]       " highlight last inserted text
" }}}
" Git Spellcheck on {{{
autocmd Filetype gitcommit setlocal spell textwidth=72
" }}}
" Filetype overrides {{{
augroup markdown
    " remove previous autocmds
    autocmd!
    " set every new or read *.md buffer to use the markdown filetype
    autocmd BufRead,BufNew *.md set filetype=markdown
augroup END
" }}}
" Leader Shortcuts {{{
let mapleader=","
nnoremap <leader>, :n         " Go to next file
nnoremap <leader>m :silent make\|redraw!\|cw<CR>    "
nnoremap <leader>ev :vsp $MYVIMRC<CR>       " Edit my .vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>    " Source my .vimrc
nnoremap <leader>l :call ToggleNumber()<CR> " Call funtion below to toggle line number using function below
nnoremap <leader><space> :noh<CR>
nnoremap <leader>s :mksession<CR>           " Create session of windows
nnoremap <leader>1 :set number!<CR>
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" }}}
" Powerline {{{
"set encoding=utf-8
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup
let g:airline_extensions = [ 'branch', 'default']
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_theme='solarized'
set laststatus=2
" }}}
" CtrlP {{{
"let g:ctrlp_match_window = 'bottom,order:ttb'
"let g:ctrlp_switch_buffer = 0
"let g:ctrlp_working_path_mode = 0
"let g:ctrlp_custom_ignore = '\vbuild/|dist/|venv/|target/|\.(o|swp|pyc|egg)$'
" }}}
" Launch Config {{{
"runtime! debian.vim
set nocompatible
call pathogen#infect()
" }}}
"" Tmux {{{
"if exists('$TMUX') " allows cursor change in tmux mode
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
"else
"    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"endif
"" }}}
" MacVim {{{
" set guioptions-=r 
" set guioptions-=L
" }}}
" AutoGroups {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md,*.rb :call <SID>StripTrailingWhitespaces()
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
augroup END
" }}}
" Backups {{{
set backup 
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
set backupskip=/tmp/*,/private/tmp/* 
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp 
set writebackup
" }}}
" Custom Functions {{{
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

function! ToggleShowWhitesace()
    if(&list == 1)
        set nolist
    else
        set list
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

function! <SID>CleanFile()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %!git stripspace
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
 
function! s:NextTextObject(motion, dir)
  let c = nr2char(getchar())
 
  if c ==# "b"
      let c = "("
  elseif c ==# "B"
      let c = "{"
  elseif c ==# "r"
      let c = "["
  endif
 
  exe "normal! ".a:dir.c."v".a:motion.c
endfunction
" }}}

" vim:foldmethod=marker:foldlevel=0
