#!/bin/bash
#
# A script to use the prophet environment to be able to connect to the correct database.
########################################################
#
self=$(basename $0)

usage() {
    [ $# -gt 0 ] && echo "ERROR: $@"
    cat <<EOF
Usage: ${self} [-G <gcid>] [-v]
    -G <gcid> = Use the gcid to lookup tenant specific properties
    -T        = Use the test database instead (Not Implemented Yet)
    -v        = Verbose - print debug info
EOF
}

# TODO: use a new param -T for the test database
# Open a psql prompt to the current test database
#function sqltest() {
#    loaddbprops
#    echo "psql -U ${database_test_username:-${database_username:-prophet}} -h ${database_test_host:-${database_host:-localhost}} -d ${database_test_name:-${database_name:-prophet}_test}"
#    psql -U ${database_test_username:-${database_username:-prophet}} -h ${database_test_host:-${database_host:-localhost}} -d ${database_test_name:-${database_name:-prophet}_test}
#}


gcid=
loadprop_verbose=

function loaddbprops() {
    # Check to see if we are in a prophet environment
    if [ ! -e "$PRJ_HOME" ]; then
        echo "Unable to determine environment: Cannot find [$pfile]";
        return 1;

    fi

    local tenant=$(echo ${gcid:-NOTENANT} | awk '{print toupper($0)}')
    [ $loadprop_verbose ] && echo "TENANT=$tenant"

    # Pull properties from the environement files
    local tmpSrcfile=`mktemp`
    
    # Files relative to $PRJ_HOME
    local pfiles=(
                   "${PRJ_HOME}/etc/prophet.properties"
                   "${PRJ_HOME}/etc/prophet/$USER.properties"
                   "${PRJ_HOME}/etc/prophet/$(hostname).properties"
                   "${PRJ_HOME}/etc/tenants/${tenant}.tenant.properties"
                   "${CONFIG_DIR_HOST:-/nowhere}/$(hostname).properties"
                    # "${PRJ_HOME}/etc-template/prophet/$USER.properties"
                    # "${PRJ_HOME}/etc-template/prophet/$(hostname).properties"
                  )
    for pf in "${pfiles[@]}"; do
        echo "$pf"
        if [ -e "$pf" ]; then
            echo "# Read from: $pf" >> $tmpSrcfile
            grep -e "^database" "$pf" | sed 's/^/export /' | sed 's/\./_/g' >> $tmpSrcfile
        # else
        #     echo "Not Found: $f"
        fi
    done

    unset database_username database_host database_name database_test_username database_test_host database_test_name
    [ $loadprop_verbose ] && cat $tmpSrcfile
    . $tmpSrcfile
    rm $tmpSrcfile > /dev/null
}

if [ "$#" != "0" ]; then
    while [ -n "$1" ]
    do
        arg="$1"
        case $arg in
            -G) shift; gcid=$(echo $1 | awk '{print toupper($0)}') ;;
            -v) loadprop_verbose=true;;
            -h) shift; cmdline_host=${1};;
            -d) shift; cmdline_database=${1};;
            -U) shift; cmdline_username=${1};;
            -T) usage "-T=Test is not implemented yet"; exit 2;;
            *) 
                extra_args="$extra_args $arg"
                ;;
        esac
        shift
    done
fi

loaddbprops
dbhost=${cmdline_host:-${database_host:-localhost}}
dbuser=${cmdline_username:-${database_username:-prophet}}
dbname=${cmdline_database:-${database_name:-prophet}}
echo
echo "psql -U ${dbuser} -h ${dbhost} -d ${dbname} $extra_args"
psql -U ${dbuser} -h ${dbhost} -d ${dbname} $extra_args

